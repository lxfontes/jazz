mod bindings {
    //! These bindings are generated by wit-bindgen, and reused by other parts of the crate
    use crate::JazzWorld;
    wit_bindgen::generate!({ generate_all });
    export!(JazzWorld);
}

use bindings::exports::wasmcloud::jazz::runner::Guest;

struct Runner;

impl Runner {
    fn run(&self, script: String) -> std::result::Result<String, String> {
        let rt = rquickjs::Runtime::new().map_err(|e| format!("runtime: {}", e))?;
        let ctx = rquickjs::Context::full(&rt).map_err(|e| format!("context: {}", e))?;

        let script_result = ctx
            .with(|ctx| -> rquickjs::Result<String> {
                return ctx.eval::<String, _>(script.as_bytes());
            })
            .map_err(|e| format!("ctx: {}", e))?;

        Ok(script_result)
    }
}

struct JazzWorld;

impl bindings::exports::wasmcloud::jazz::runner::Guest for JazzWorld {
    fn run_script(script: String) -> std::result::Result<String, String> {
        let r = Runner {};
        return r.run(script);
    }
}

impl bindings::exports::wasi::cli::run::Guest for JazzWorld {
    fn run() -> std::result::Result<(), ()> {
        let script = r"
        var x = 3;
        var y = 5;

        (x * y).toString();
        "
        .to_string();
        match JazzWorld::run_script(script) {
            Ok(result) => {
                println!("Result: {}", result);
                Ok(())
            }
            Err(e) => {
                println!("Error: {}", e);
                Err(())
            }
        }
    }
}
